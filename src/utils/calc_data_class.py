"""
The basic class for calculations
"""

# external imports
from pymatgen.symmetry.bandstructure import HighSymmKpath

# local imports
from src.utils.basic_utils import get_kpt_grid
from src.utils.qe_helper import qe_get_cutoff


class calc_data:
    """
    Class which contains data about calculation in code-agnostic version
    structure:      pymatgen structure class object
    name:           name of the system (e.g. Si, GaP, Arsole, LK99, ...)
    base_dir:       base directory of the code, just so the code knows where the pseudopotential files are
    identifier:     name used for prefixes etc. in other functions (same as id if it is given, otherwise set to the name)
    ibrav:          QuantumEspresso input string to detect all symmetries
    calc_type:      calculation type like scf, nscf, bands
    kppa:           k-grid density
    k_points_grid:  automatically generated by "automatic_density_by_vol" based on density kppa for (n)scf calculation
                    automatically generated by "HighSymmKpath" for bands calculation (see import for documentation)
    pw_cutoff:      plane wave energy cutoff
    For hybrid calculations:
    divergence:     Treatment of the divergence
    functional:     Used hybrid functional
    """

    def __init__(
        self,
        structure,
        name,
        id=0,
        ibrav=0,
        calc_type="scf",
        kppa=1500,
        pw_cutoff=-1,
        pseudo="",
        functional="",
        divergence="",
    ):
        self.structure = structure
        self.name = name
        self.id = id
        if id != 0:
            self.identifier = id
        else:
            self.identifier = name
        self.ibrav = ibrav
        self.calc_type = calc_type
        self.kppa = kppa
        self.pseudo = pseudo

        # if no cutoff is supplied, use the default value
        if pw_cutoff == -1:
            self.pw_cutoff = qe_get_cutoff(structure, pseudo)
        else:
            self.pw_cutoff = pw_cutoff

        if calc_type in ["scf", "nscf"]:
            self.k_points_grid = get_kpt_grid(structure, kppa)
            self.prefix = (
                self.identifier
                + "_"
                + self.calc_type
                + "_k"
                + str(self.kppa)
                + "_E"
                + str(self.pw_cutoff)
            )
        elif calc_type == "bands":
            ibz = HighSymmKpath(structure)
            self.paths = ibz.kpath["path"]
            self.points = ibz.kpath["kpoints"]
            kpoint_grid = []
            self.k_points_grid = kpoint_grid
            self.prefix = (
                self.identifier + "_" + self.calc_type + "_E" + str(self.pw_cutoff)
            )
        elif calc_type == "hybrid":
            self.k_points_grid = get_kpt_grid(structure, kppa)
            self.prefix = (
                self.identifier
                + "_"
                + self.calc_type
                + "_k"
                + str(self.kppa)
                + "_E"
                + str(self.pw_cutoff)
            )
            self.divergence = divergence
            self.functional = functional
